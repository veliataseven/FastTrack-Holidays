package com.airfranceklm.fasttrack.assignment.dto;

import com.airfranceklm.fasttrack.assignment.enums.HolidayStatus;
import jakarta.validation.constraints.FutureOrPresent;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * Data Transfer Object (DTO) for representing a holiday.
 * Contains fields for the holiday's label, employee ID, start and end dates, and status.
 * This DTO is used to transfer holiday data between the frontend and backend.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class HolidayDTO {

    /**
     * The unique identifier for the holiday.
     * This ID is automatically generated by the server when a new holiday is created.
     */
    private UUID holidayId;

    /**
     * The label describing the holiday (e.g., "Summer Holidays").
     * Cannot be null or empty.
     */
    @NotBlank(message = "Holiday label cannot be empty")
    private String holidayLabel;

    /**
     * The unique employee ID associated with the holiday (e.g., "klm012345").
     * Cannot be null or empty.
     */
    @NotBlank(message = "Employee ID cannot be empty")
    private String employeeId;

    /**
     * The start date and time of the holiday (in UTC).
     * Must be a future or present date.
     */
    @NotNull(message = "Start date cannot be null")
    @FutureOrPresent(message = "Holiday start date must be in the future or today")
    private OffsetDateTime startOfHoliday;

    /**
     * The end date and time of the holiday (in UTC).
     * Must be a future or present date.
     */
    @NotNull(message = "End date cannot be null")
    @FutureOrPresent(message = "Holiday end date must be in the future or today")
    private OffsetDateTime endOfHoliday;

    /**
     * The current status of the holiday (e.g., "DRAFT", "REQUESTED", "SCHEDULED", "ARCHIVED").
     * Cannot be null or empty.
     */
    @NotNull(message = "Status cannot be null")
    private HolidayStatus status;
}
